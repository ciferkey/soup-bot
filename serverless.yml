# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: super-soup

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.6
  region: us-east-1
  iamRoleStatements:
    - Effect: "Allow"
      Action:
       - rds:*
      Resource: "arn:aws:rds:us-east-1:698392743170:db:super-soup"

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  soup-bot:
    handler: tracker.update
    vpc:
       securityGroupIds:
         - sg-22c4d06b
       subnetIds:
         - subnet-888e31ff
         - subnet-5bb94270
         - subnet-92409ecb
         - subnet-627ae058
    events:
      - schedule:
          rate: cron(0/15 15 ? * MON-FRI *)
          enabled: true
  provision:
    handler: provision.lambda_handler
    timeout: 90
    role: provisionRole
    events:
      -schedule:
          rate: cron(50 14 ? * MON-FRI *)
          input: ' {"mode": "stop","region": "us-east-1","ec2_instance": "i-0c07f193a512e6680","rds_instance": "super-soup2"}'
          enabled: true
      -schedule:
          rate: cron(10 16 ? * MON-FRI *)
          input: ' {"mode": "stop","region": "us-east-1","ec2_instance": "i-0c07f193a512e6680","rds_instance": "super-soup2"}'
          enabled: true

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

resources:
    provisionRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ProvisionRole
        AssumeRolePolicyDocument:
          Version: '2018'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: provisionPolicy
            PolicyDocument:
              Version: '2018'
              Statement:
                -  Effect: "Allow"
                   Action:
                     - rds:StopDBInstance
                     - rds:StartDBInstance
                  Resource: "*"
                -  Effect: "Allow"
                   Action:
                     - ec2:Start*
                     - ec2:Stop*
                     - ec2:DescribeInstanceStatus*
                     - ec2:AllocateAddress
                     - ec2:AssociateAddress
                     - ec2:DisassociateAddress
                     - ec2:ReleaseAddress
                  Resource: "*"

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: true
    zip: true

package:
  exclude:
   - 'resources/output_graph.pb'
   - 'resources/soup.db'